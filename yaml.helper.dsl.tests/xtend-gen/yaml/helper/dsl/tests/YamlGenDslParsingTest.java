/**
 * generated by Xtext 2.22.0
 */
package yaml.helper.dsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import yaml.helper.dsl.tests.YamlGenDslInjectorProvider;
import yaml.helper.dsl.validation.YamlGenDslValidator;
import yaml.helper.dsl.yamlGenDsl.Source;
import yaml.helper.dsl.yamlGenDsl.YamlGenDslPackage;

@ExtendWith(InjectionExtension.class)
@InjectWith(YamlGenDslInjectorProvider.class)
@SuppressWarnings("all")
public class YamlGenDslParsingTest {
  @Inject
  private ParseHelper<Source> parseHelper;
  
  @Inject
  private ValidationTestHelper validationTestHelper;
  
  @Test
  public void simpleTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import \"asd\"");
      _builder.newLine();
      _builder.append("TestField1 {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("TestField2 extends TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("root TestField3{}");
      _builder.newLine();
      final Source result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void bodyTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name: \"test-field\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("default: \"asd\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hint: \"asd\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("values: \"asd\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("TestField2 extends TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("values: [\"asd\" \"aaa\"]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("field mandatory {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("name: \"inline-field\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hint: \"test\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("field extends TestField1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("name: \"inline-child-field\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hint: \"test\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("TestField3 extends TestField2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("extend \"inline-field\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hint: \"test1\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("TestField4 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("fields {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Source result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void nameTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("field mandatory {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("name: \"inline-field\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hint: \"test\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Source result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("TestField1 {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("field mandatory {");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("key: \"inline-field\"");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("hint: \"test\"");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      result = this.parseHelper.parse(_builder_2);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_1 = errors.isEmpty();
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Unexpected errors: ");
      String _join_1 = IterableExtensions.join(errors, ", ");
      _builder_3.append(_join_1);
      Assertions.assertTrue(_isEmpty_1, _builder_3.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("TestField1 {");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("field mandatory {");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("hint: \"test\"");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.append("}");
      _builder_4.newLine();
      result = this.parseHelper.parse(_builder_4);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_2 = errors.isEmpty();
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("Unexpected errors: ");
      String _join_2 = IterableExtensions.join(errors, ", ");
      _builder_5.append(_join_2);
      Assertions.assertTrue(_isEmpty_2, _builder_5.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.NESTED_FIELD, 
        YamlGenDslValidator.UNNAMED_NESTED_FIELD, 
        YamlGenDslValidator.UNNAMED_NESTED_FIELD);
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("TestField1 {");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("name: \"tf1\"");
      _builder_6.newLine();
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("TestField2 {");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("field mandatory extends TestField1 {");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("hint: \"test\"");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("}");
      _builder_6.newLine();
      result = this.parseHelper.parse(_builder_6);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_3 = errors.isEmpty();
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("Unexpected errors: ");
      String _join_3 = IterableExtensions.join(errors, ", ");
      _builder_7.append(_join_3);
      Assertions.assertTrue(_isEmpty_3, _builder_7.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("TestField1 {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("key: \"tf1\"");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("TestField2 {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("field mandatory extends TestField1 {");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("hint: \"test\"");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      result = this.parseHelper.parse(_builder_8);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_4 = errors.isEmpty();
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("Unexpected errors: ");
      String _join_4 = IterableExtensions.join(errors, ", ");
      _builder_9.append(_join_4);
      Assertions.assertTrue(_isEmpty_4, _builder_9.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("TestField1 {");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("name: \"tf1\"");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("TestField2 extends TestField1 {}");
      _builder_10.newLine();
      _builder_10.append("TestField3 {");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("field mandatory extends TestField2 {");
      _builder_10.newLine();
      _builder_10.append("\t\t");
      _builder_10.append("hint: \"test\"");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      result = this.parseHelper.parse(_builder_10);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_5 = errors.isEmpty();
      StringConcatenation _builder_11 = new StringConcatenation();
      _builder_11.append("Unexpected errors: ");
      String _join_5 = IterableExtensions.join(errors, ", ");
      _builder_11.append(_join_5);
      Assertions.assertTrue(_isEmpty_5, _builder_11.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_12 = new StringConcatenation();
      _builder_12.append("TestField1 {");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("key: \"tf1\"");
      _builder_12.newLine();
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("TestField2 extends TestField1 {}");
      _builder_12.newLine();
      _builder_12.append("TestField3 {");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("field mandatory extends TestField2 {");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("hint: \"test\"");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("}");
      _builder_12.newLine();
      result = this.parseHelper.parse(_builder_12);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_6 = errors.isEmpty();
      StringConcatenation _builder_13 = new StringConcatenation();
      _builder_13.append("Unexpected errors: ");
      String _join_6 = IterableExtensions.join(errors, ", ");
      _builder_13.append(_join_6);
      Assertions.assertTrue(_isEmpty_6, _builder_13.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_14 = new StringConcatenation();
      _builder_14.append("TestField1 {");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("key: \"tf1\"");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("name: \"tf1\"");
      _builder_14.newLine();
      _builder_14.append("}");
      _builder_14.newLine();
      result = this.parseHelper.parse(_builder_14);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_7 = errors.isEmpty();
      StringConcatenation _builder_15 = new StringConcatenation();
      _builder_15.append("Unexpected errors: ");
      String _join_7 = IterableExtensions.join(errors, ", ");
      _builder_15.append(_join_7);
      Assertions.assertTrue(_isEmpty_7, _builder_15.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.STRING_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_KEY_NAME_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_KEY_NAME_PROPERTY);
      StringConcatenation _builder_16 = new StringConcatenation();
      _builder_16.append("TestField1 {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("name: \"tf1\"");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("key: \"tf1\"");
      _builder_16.newLine();
      _builder_16.append("}");
      _builder_16.newLine();
      result = this.parseHelper.parse(_builder_16);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_8 = errors.isEmpty();
      StringConcatenation _builder_17 = new StringConcatenation();
      _builder_17.append("Unexpected errors: ");
      String _join_8 = IterableExtensions.join(errors, ", ");
      _builder_17.append(_join_8);
      Assertions.assertTrue(_isEmpty_8, _builder_17.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.STRING_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_KEY_NAME_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_KEY_NAME_PROPERTY);
      StringConcatenation _builder_18 = new StringConcatenation();
      _builder_18.append("TestField1 {");
      _builder_18.newLine();
      _builder_18.append("\t");
      _builder_18.append("key: \"tf1\"");
      _builder_18.newLine();
      _builder_18.append("}");
      _builder_18.newLine();
      _builder_18.append("TestField2 extends TestField1 {");
      _builder_18.newLine();
      _builder_18.append("\t");
      _builder_18.append("name: \"tf2\"");
      _builder_18.newLine();
      _builder_18.append("}");
      _builder_18.newLine();
      result = this.parseHelper.parse(_builder_18);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_9 = errors.isEmpty();
      StringConcatenation _builder_19 = new StringConcatenation();
      _builder_19.append("Unexpected errors: ");
      String _join_9 = IterableExtensions.join(errors, ", ");
      _builder_19.append(_join_9);
      Assertions.assertTrue(_isEmpty_9, _builder_19.toString());
      this.validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void duplicatePropertyTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("key: \"test-field\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("key: \"asd\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Source result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.STRING_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("TestField1 {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("name: \"test-field\"");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("name: \"asd\"");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      result = this.parseHelper.parse(_builder_2);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_1 = errors.isEmpty();
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Unexpected errors: ");
      String _join_1 = IterableExtensions.join(errors, ", ");
      _builder_3.append(_join_1);
      Assertions.assertTrue(_isEmpty_1, _builder_3.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.STRING_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY);
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("TestField1 {");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("hint: \"test-field\"");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("hint: \"asd\"");
      _builder_4.newLine();
      _builder_4.append("}");
      _builder_4.newLine();
      result = this.parseHelper.parse(_builder_4);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_2 = errors.isEmpty();
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("Unexpected errors: ");
      String _join_2 = IterableExtensions.join(errors, ", ");
      _builder_5.append(_join_2);
      Assertions.assertTrue(_isEmpty_2, _builder_5.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.STRING_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY);
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("TestField1 {");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("default: \"test-field\"");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("default: \"asd\"");
      _builder_6.newLine();
      _builder_6.append("}");
      _builder_6.newLine();
      result = this.parseHelper.parse(_builder_6);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_3 = errors.isEmpty();
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("Unexpected errors: ");
      String _join_3 = IterableExtensions.join(errors, ", ");
      _builder_7.append(_join_3);
      Assertions.assertTrue(_isEmpty_3, _builder_7.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.VALUES_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY);
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("TestField1 {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("values: \"test-field\"");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("values: \"asd\"");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      result = this.parseHelper.parse(_builder_8);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_4 = errors.isEmpty();
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("Unexpected errors: ");
      String _join_4 = IterableExtensions.join(errors, ", ");
      _builder_9.append(_join_4);
      Assertions.assertTrue(_isEmpty_4, _builder_9.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.VALUES_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_PROPERTY);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void extendTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("extend \"asd\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("key: \"asdd\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Source result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.EXTEND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("TestField1 {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("field {");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("key: \"asd\"");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("TestField2 extends TestField1 {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("extend \"asd\" {");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("key: \"asdd\"");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      result = this.parseHelper.parse(_builder_2);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_1 = errors.isEmpty();
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Unexpected errors: ");
      String _join_1 = IterableExtensions.join(errors, ", ");
      _builder_3.append(_join_1);
      Assertions.assertTrue(_isEmpty_1, _builder_3.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("TestField1 {");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("field {");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("key: \"asd\"");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.append("TestField2 extends TestField1 {");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("extend \"asdf\" {");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("key: \"asdd\"");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.append("}");
      _builder_4.newLine();
      result = this.parseHelper.parse(_builder_4);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_2 = errors.isEmpty();
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("Unexpected errors: ");
      String _join_2 = IterableExtensions.join(errors, ", ");
      _builder_5.append(_join_2);
      Assertions.assertTrue(_isEmpty_2, _builder_5.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.EXTEND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND);
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("TestField1 {");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("field {");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("key: \"asd\"");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("field {");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("key: \"dsa\"");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("TestField2 extends TestField1 {");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("extend \"asd\" {");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("extend \"dsa\" {");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("key: \"asdfsdg\"");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("}");
      _builder_6.newLine();
      result = this.parseHelper.parse(_builder_6);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_3 = errors.isEmpty();
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("Unexpected errors: ");
      String _join_3 = IterableExtensions.join(errors, ", ");
      _builder_7.append(_join_3);
      Assertions.assertTrue(_isEmpty_3, _builder_7.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("TestField1 {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("field {");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("key: \"asd\"");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("field {");
      _builder_8.newLine();
      _builder_8.append("\t\t\t");
      _builder_8.append("key: \"dsa\"");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("TestField2 extends TestField1 {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("extend \"dsa\" {");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("extend \"dsa\" {");
      _builder_8.newLine();
      _builder_8.append("\t\t\t");
      _builder_8.append("key: \"asdfsdg\"");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      result = this.parseHelper.parse(_builder_8);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_4 = errors.isEmpty();
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("Unexpected errors: ");
      String _join_4 = IterableExtensions.join(errors, ", ");
      _builder_9.append(_join_4);
      Assertions.assertTrue(_isEmpty_4, _builder_9.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.EXTEND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND);
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("TestField1 {");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("field {");
      _builder_10.newLine();
      _builder_10.append("\t\t");
      _builder_10.append("key: \"asd\"");
      _builder_10.newLine();
      _builder_10.append("\t\t");
      _builder_10.append("field {");
      _builder_10.newLine();
      _builder_10.append("\t\t\t");
      _builder_10.append("key: \"dsa\"");
      _builder_10.newLine();
      _builder_10.append("\t\t");
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("TestField2 extends TestField1 {");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("extend \"asd\" {");
      _builder_10.newLine();
      _builder_10.append("\t\t");
      _builder_10.append("extend \"asd\" {");
      _builder_10.newLine();
      _builder_10.append("\t\t\t");
      _builder_10.append("key: \"asdfsdg\"");
      _builder_10.newLine();
      _builder_10.append("\t\t");
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      result = this.parseHelper.parse(_builder_10);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_5 = errors.isEmpty();
      StringConcatenation _builder_11 = new StringConcatenation();
      _builder_11.append("Unexpected errors: ");
      String _join_5 = IterableExtensions.join(errors, ", ");
      _builder_11.append(_join_5);
      Assertions.assertTrue(_isEmpty_5, _builder_11.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.EXTEND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND, 
        YamlGenDslValidator.EXTEND_FIELD_NOT_FOUND);
      StringConcatenation _builder_12 = new StringConcatenation();
      _builder_12.append("TestField1 {");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("field {");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("key: \"asd\"");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("field {");
      _builder_12.newLine();
      _builder_12.append("\t\t\t");
      _builder_12.append("key: \"dsa\"");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("TestField2 extends TestField1 {");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("extend \"asd\" {");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("extend \"dsa\" {");
      _builder_12.newLine();
      _builder_12.append("\t\t\t");
      _builder_12.append("key: \"asd\"");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("TestField3 extends TestField1 {");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("extend \"asd\" {");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("extend \"dsa\" {");
      _builder_12.newLine();
      _builder_12.append("\t\t\t");
      _builder_12.append("key: \"asdfsdg\"");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("TestField4 extends TestField2 {");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("extend \"asd\" {");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("extend \"asd\" {");
      _builder_12.newLine();
      _builder_12.append("\t\t\t");
      _builder_12.append("key: \"asdfsdg\"");
      _builder_12.newLine();
      _builder_12.append("\t\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("}");
      _builder_12.newLine();
      _builder_12.append("}");
      _builder_12.newLine();
      result = this.parseHelper.parse(_builder_12);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_6 = errors.isEmpty();
      StringConcatenation _builder_13 = new StringConcatenation();
      _builder_13.append("Unexpected errors: ");
      String _join_6 = IterableExtensions.join(errors, ", ");
      _builder_13.append(_join_6);
      Assertions.assertTrue(_isEmpty_6, _builder_13.toString());
      this.validationTestHelper.assertNoErrors(result);
      StringConcatenation _builder_14 = new StringConcatenation();
      _builder_14.append("TestField1 {");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("field {");
      _builder_14.newLine();
      _builder_14.append("\t\t");
      _builder_14.append("key: \"asd\"");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("}");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("field {");
      _builder_14.newLine();
      _builder_14.append("\t\t");
      _builder_14.append("key: \"dsa\"");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("}");
      _builder_14.newLine();
      _builder_14.append("}");
      _builder_14.newLine();
      _builder_14.append("TestField2 extends TestField1 {");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("extend \"asd\" {");
      _builder_14.newLine();
      _builder_14.append("\t\t");
      _builder_14.append("key: \"dsa\"");
      _builder_14.newLine();
      _builder_14.append("\t");
      _builder_14.append("}");
      _builder_14.newLine();
      _builder_14.append("}");
      _builder_14.newLine();
      result = this.parseHelper.parse(_builder_14);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_7 = errors.isEmpty();
      StringConcatenation _builder_15 = new StringConcatenation();
      _builder_15.append("Unexpected errors: ");
      String _join_7 = IterableExtensions.join(errors, ", ");
      _builder_15.append(_join_7);
      Assertions.assertTrue(_isEmpty_7, _builder_15.toString());
      this.validationTestHelper.assertError(result, 
        YamlGenDslPackage.Literals.STRING_PROPERTY, 
        YamlGenDslValidator.DUPLICATE_NESTED_FIELD_NAME, 
        YamlGenDslValidator.DUPLICATE_NESTED_FIELD_NAME);
      StringConcatenation _builder_16 = new StringConcatenation();
      _builder_16.append("TestField1 {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("field {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("key: \"asd\"");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("field {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("key: \"dsa\"");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("TestField2 extends TestField1 {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("extend \"asd\" {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("key: \"dsa\"");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("extend \"dsa\" {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("key: \"asd\"");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("}");
      _builder_16.newLine();
      result = this.parseHelper.parse(_builder_16);
      Assertions.assertNotNull(result);
      errors = result.eResource().getErrors();
      boolean _isEmpty_8 = errors.isEmpty();
      StringConcatenation _builder_17 = new StringConcatenation();
      _builder_17.append("Unexpected errors: ");
      String _join_8 = IterableExtensions.join(errors, ", ");
      _builder_17.append(_join_8);
      Assertions.assertTrue(_isEmpty_8, _builder_17.toString());
      this.validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
