/**
 * generated by Xtext 2.22.0
 */
package yaml.helper.dsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import yaml.helper.dsl.tests.YamlGenDslInjectorProvider;
import yaml.helper.dsl.yamlGenDsl.Source;

@ExtendWith(InjectionExtension.class)
@InjectWith(YamlGenDslInjectorProvider.class)
@SuppressWarnings("all")
public class YamlGenDslParsingTest {
  @Inject
  private ParseHelper<Source> parseHelper;
  
  @Test
  public void simpleTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import \"asd\"");
      _builder.newLine();
      _builder.append("TestField1 {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("TestField2 extends TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("root TestField3{}");
      _builder.newLine();
      final Source result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void bodyTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name: \"test-field\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("default: \"asd\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hint: \"asd\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("values: \"asd\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("TestField2 extends TestField1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("values: [\"asd\" \"aaa\"]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("field mandatory {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("name: \"inline-field\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hint: \"test\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("field extends TestField1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("name: \"inline-child-field\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hint: \"test\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("TestField3 extends TestField2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("extend \"inline-field\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("hint: \"test1\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("TestField4 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("fields {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Source result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
