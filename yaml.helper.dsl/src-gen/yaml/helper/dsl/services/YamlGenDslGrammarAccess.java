/*
 * generated by Xtext 2.22.0
 */
package yaml.helper.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class YamlGenDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Source");
		private final Assignment cEntriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntriesSourceElementParserRuleCall_0 = (RuleCall)cEntriesAssignment.eContents().get(0);
		
		//Source:
		//	entries+=SourceElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//entries+=SourceElement*
		public Assignment getEntriesAssignment() { return cEntriesAssignment; }
		
		//SourceElement
		public RuleCall getEntriesSourceElementParserRuleCall_0() { return cEntriesSourceElementParserRuleCall_0; }
	}
	public class SourceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.SourceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SourceElement:
		//	Field
		//	| Import;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Import
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Import
		public RuleCall getImportParserRuleCall_1() { return cImportParserRuleCall_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' path=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' path=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHelpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHelpSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cHelpAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0 = (Keyword)cRootAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperFieldAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperFieldFieldCrossReference_3_1_0 = (CrossReference)cSuperFieldAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperFieldFieldIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperFieldFieldCrossReference_3_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Field:
		//	help+=SL_COMMENT*
		//	root?='root'? name=ID ('extends' superField=[Field])? body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//help+=SL_COMMENT* root?='root'? name=ID ('extends' superField=[Field])? body=Body
		public Group getGroup() { return cGroup; }
		
		//help+=SL_COMMENT*
		public Assignment getHelpAssignment_0() { return cHelpAssignment_0; }
		
		//SL_COMMENT
		public RuleCall getHelpSL_COMMENTTerminalRuleCall_0_0() { return cHelpSL_COMMENTTerminalRuleCall_0_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0() { return cRootRootKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' superField=[Field])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superField=[Field]
		public Assignment getSuperFieldAssignment_3_1() { return cSuperFieldAssignment_3_1; }
		
		//[Field]
		public CrossReference getSuperFieldFieldCrossReference_3_1_0() { return cSuperFieldFieldCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSuperFieldFieldIDTerminalRuleCall_3_1_0_1() { return cSuperFieldFieldIDTerminalRuleCall_3_1_0_1; }
		
		//body=Body
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_4_0() { return cBodyBodyParserRuleCall_4_0; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsBodyElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Body:
		//	{Body} '{' elements+=BodyElement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Body} '{' elements+=BodyElement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=BodyElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//BodyElement
		public RuleCall getElementsBodyElementParserRuleCall_2_0() { return cElementsBodyElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BodyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.BodyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExtendParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestedFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNestedFieldsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BodyElement:
		//	Extend
		//	| NestedField
		//	| NestedFields
		//	| Property;
		@Override public ParserRule getRule() { return rule; }
		
		//Extend | NestedField | NestedFields | Property
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Extend
		public RuleCall getExtendParserRuleCall_0() { return cExtendParserRuleCall_0; }
		
		//NestedField
		public RuleCall getNestedFieldParserRuleCall_1() { return cNestedFieldParserRuleCall_1; }
		
		//NestedFields
		public RuleCall getNestedFieldsParserRuleCall_2() { return cNestedFieldsParserRuleCall_2; }
		
		//Property
		public RuleCall getPropertyParserRuleCall_3() { return cPropertyParserRuleCall_3; }
	}
	public class ExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Extend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Extend:
		//	'extend' STRING Body;
		@Override public ParserRule getRule() { return rule; }
		
		//'extend' STRING Body
		public Group getGroup() { return cGroup; }
		
		//'extend'
		public Keyword getExtendKeyword_0() { return cExtendKeyword_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//Body
		public RuleCall getBodyParserRuleCall_2() { return cBodyParserRuleCall_2; }
	}
	public class NestedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.NestedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHelpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHelpSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cHelpAssignment_0.eContents().get(0);
		private final Keyword cFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMandatoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMandatoryMandatoryKeyword_2_0 = (Keyword)cMandatoryAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFieldAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_3_1_0 = (CrossReference)cFieldAssignment_3_1.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFieldFieldCrossReference_3_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//NestedField:
		//	help+=SL_COMMENT*
		//	'field' mandatory?='mandatory'? ('extends' field=[Field])? body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//help+=SL_COMMENT* 'field' mandatory?='mandatory'? ('extends' field=[Field])? body=Body
		public Group getGroup() { return cGroup; }
		
		//help+=SL_COMMENT*
		public Assignment getHelpAssignment_0() { return cHelpAssignment_0; }
		
		//SL_COMMENT
		public RuleCall getHelpSL_COMMENTTerminalRuleCall_0_0() { return cHelpSL_COMMENTTerminalRuleCall_0_0; }
		
		//'field'
		public Keyword getFieldKeyword_1() { return cFieldKeyword_1; }
		
		//mandatory?='mandatory'?
		public Assignment getMandatoryAssignment_2() { return cMandatoryAssignment_2; }
		
		//'mandatory'
		public Keyword getMandatoryMandatoryKeyword_2_0() { return cMandatoryMandatoryKeyword_2_0; }
		
		//('extends' field=[Field])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//field=[Field]
		public Assignment getFieldAssignment_3_1() { return cFieldAssignment_3_1; }
		
		//[Field]
		public CrossReference getFieldFieldCrossReference_3_1_0() { return cFieldFieldCrossReference_3_1_0; }
		
		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_3_1_0_1() { return cFieldFieldIDTerminalRuleCall_3_1_0_1; }
		
		//body=Body
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_4_0() { return cBodyBodyParserRuleCall_4_0; }
	}
	public class NestedFieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.NestedFields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHelpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHelpSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cHelpAssignment_0.eContents().get(0);
		private final Keyword cFieldsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMandatoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMandatoryMandatoryKeyword_2_0 = (Keyword)cMandatoryAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFieldAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_3_1_0 = (CrossReference)cFieldAssignment_3_1.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFieldFieldCrossReference_3_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//NestedFields:
		//	help+=SL_COMMENT*
		//	'fields' mandatory?='mandatory'? ('extends' field=[Field])? body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//help+=SL_COMMENT* 'fields' mandatory?='mandatory'? ('extends' field=[Field])? body=Body
		public Group getGroup() { return cGroup; }
		
		//help+=SL_COMMENT*
		public Assignment getHelpAssignment_0() { return cHelpAssignment_0; }
		
		//SL_COMMENT
		public RuleCall getHelpSL_COMMENTTerminalRuleCall_0_0() { return cHelpSL_COMMENTTerminalRuleCall_0_0; }
		
		//'fields'
		public Keyword getFieldsKeyword_1() { return cFieldsKeyword_1; }
		
		//mandatory?='mandatory'?
		public Assignment getMandatoryAssignment_2() { return cMandatoryAssignment_2; }
		
		//'mandatory'
		public Keyword getMandatoryMandatoryKeyword_2_0() { return cMandatoryMandatoryKeyword_2_0; }
		
		//('extends' field=[Field])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//field=[Field]
		public Assignment getFieldAssignment_3_1() { return cFieldAssignment_3_1; }
		
		//[Field]
		public CrossReference getFieldFieldCrossReference_3_1_0() { return cFieldFieldCrossReference_3_1_0; }
		
		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_3_1_0_1() { return cFieldFieldIDTerminalRuleCall_3_1_0_1; }
		
		//body=Body
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_4_0() { return cBodyBodyParserRuleCall_4_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPermittedValuesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Property:
		//	Name
		//	| Default
		//	| Hint
		//	| PermittedValues;
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Default | Hint | PermittedValues
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Default
		public RuleCall getDefaultParserRuleCall_1() { return cDefaultParserRuleCall_1; }
		
		//Hint
		public RuleCall getHintParserRuleCall_2() { return cHintParserRuleCall_2; }
		
		//PermittedValues
		public RuleCall getPermittedValuesParserRuleCall_3() { return cPermittedValuesParserRuleCall_3; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Name:
		//	'name:' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'name:' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'name:'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValuesParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Default:
		//	'default:' value=Values;
		@Override public ParserRule getRule() { return rule; }
		
		//'default:' value=Values
		public Group getGroup() { return cGroup; }
		
		//'default:'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//value=Values
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Values
		public RuleCall getValueValuesParserRuleCall_1_0() { return cValueValuesParserRuleCall_1_0; }
	}
	public class HintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Hint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Hint:
		//	'hint:' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'hint:' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'hint:'
		public Keyword getHintKeyword_0() { return cHintKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class PermittedValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.PermittedValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValuesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValuesParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PermittedValues:
		//	'values:' value=Values;
		@Override public ParserRule getRule() { return rule; }
		
		//'values:' value=Values
		public Group getGroup() { return cGroup; }
		
		//'values:'
		public Keyword getValuesKeyword_0() { return cValuesKeyword_0; }
		
		//value=Values
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Values
		public RuleCall getValueValuesParserRuleCall_1_0() { return cValueValuesParserRuleCall_1_0; }
	}
	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yaml.helper.dsl.YamlGenDsl.Values");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValuesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValuesAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValuesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		
		//Values:
		//	'[' values+=STRING+ ']'
		//	| values+=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=STRING+ ']' | values+=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' values+=STRING+ ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//values+=STRING+
		public Assignment getValuesAssignment_0_1() { return cValuesAssignment_0_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_0_1_0() { return cValuesSTRINGTerminalRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//values+=STRING
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_0() { return cValuesSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final SourceElements pSource;
	private final SourceElementElements pSourceElement;
	private final ImportElements pImport;
	private final FieldElements pField;
	private final BodyElements pBody;
	private final BodyElementElements pBodyElement;
	private final ExtendElements pExtend;
	private final NestedFieldElements pNestedField;
	private final NestedFieldsElements pNestedFields;
	private final PropertyElements pProperty;
	private final NameElements pName;
	private final DefaultElements pDefault;
	private final HintElements pHint;
	private final PermittedValuesElements pPermittedValues;
	private final ValuesElements pValues;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public YamlGenDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSource = new SourceElements();
		this.pSourceElement = new SourceElementElements();
		this.pImport = new ImportElements();
		this.pField = new FieldElements();
		this.pBody = new BodyElements();
		this.pBodyElement = new BodyElementElements();
		this.pExtend = new ExtendElements();
		this.pNestedField = new NestedFieldElements();
		this.pNestedFields = new NestedFieldsElements();
		this.pProperty = new PropertyElements();
		this.pName = new NameElements();
		this.pDefault = new DefaultElements();
		this.pHint = new HintElements();
		this.pPermittedValues = new PermittedValuesElements();
		this.pValues = new ValuesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("yaml.helper.dsl.YamlGenDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Source:
	//	entries+=SourceElement*;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//SourceElement:
	//	Field
	//	| Import;
	public SourceElementElements getSourceElementAccess() {
		return pSourceElement;
	}
	
	public ParserRule getSourceElementRule() {
		return getSourceElementAccess().getRule();
	}
	
	//Import:
	//	'import' path=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Field:
	//	help+=SL_COMMENT*
	//	root?='root'? name=ID ('extends' superField=[Field])? body=Body;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Body:
	//	{Body} '{' elements+=BodyElement* '}';
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//BodyElement:
	//	Extend
	//	| NestedField
	//	| NestedFields
	//	| Property;
	public BodyElementElements getBodyElementAccess() {
		return pBodyElement;
	}
	
	public ParserRule getBodyElementRule() {
		return getBodyElementAccess().getRule();
	}
	
	//Extend:
	//	'extend' STRING Body;
	public ExtendElements getExtendAccess() {
		return pExtend;
	}
	
	public ParserRule getExtendRule() {
		return getExtendAccess().getRule();
	}
	
	//NestedField:
	//	help+=SL_COMMENT*
	//	'field' mandatory?='mandatory'? ('extends' field=[Field])? body=Body;
	public NestedFieldElements getNestedFieldAccess() {
		return pNestedField;
	}
	
	public ParserRule getNestedFieldRule() {
		return getNestedFieldAccess().getRule();
	}
	
	//NestedFields:
	//	help+=SL_COMMENT*
	//	'fields' mandatory?='mandatory'? ('extends' field=[Field])? body=Body;
	public NestedFieldsElements getNestedFieldsAccess() {
		return pNestedFields;
	}
	
	public ParserRule getNestedFieldsRule() {
		return getNestedFieldsAccess().getRule();
	}
	
	//Property:
	//	Name
	//	| Default
	//	| Hint
	//	| PermittedValues;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Name:
	//	'name:' value=STRING;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Default:
	//	'default:' value=Values;
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}
	
	//Hint:
	//	'hint:' value=STRING;
	public HintElements getHintAccess() {
		return pHint;
	}
	
	public ParserRule getHintRule() {
		return getHintAccess().getRule();
	}
	
	//PermittedValues:
	//	'values:' value=Values;
	public PermittedValuesElements getPermittedValuesAccess() {
		return pPermittedValues;
	}
	
	public ParserRule getPermittedValuesRule() {
		return getPermittedValuesAccess().getRule();
	}
	
	//Values:
	//	'[' values+=STRING+ ']'
	//	| values+=STRING;
	public ValuesElements getValuesAccess() {
		return pValues;
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
