/**
 * generated by Xtext 2.22.0
 */
package yaml.helper.dsl.yamlGenDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import yaml.helper.dsl.yamlGenDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see yaml.helper.dsl.yamlGenDsl.YamlGenDslPackage
 * @generated
 */
public class YamlGenDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static YamlGenDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YamlGenDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = YamlGenDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected YamlGenDslSwitch<Adapter> modelSwitch =
    new YamlGenDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseSource(Source object)
      {
        return createSourceAdapter();
      }
      @Override
      public Adapter caseSourceElement(SourceElement object)
      {
        return createSourceElementAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseAnyField(AnyField object)
      {
        return createAnyFieldAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseBody(Body object)
      {
        return createBodyAdapter();
      }
      @Override
      public Adapter caseBodyElement(BodyElement object)
      {
        return createBodyElementAdapter();
      }
      @Override
      public Adapter caseExtend(Extend object)
      {
        return createExtendAdapter();
      }
      @Override
      public Adapter caseAnyNestedField(AnyNestedField object)
      {
        return createAnyNestedFieldAdapter();
      }
      @Override
      public Adapter caseNestedField(NestedField object)
      {
        return createNestedFieldAdapter();
      }
      @Override
      public Adapter caseNestedFields(NestedFields object)
      {
        return createNestedFieldsAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseStringProperty(StringProperty object)
      {
        return createStringPropertyAdapter();
      }
      @Override
      public Adapter caseValuesProperty(ValuesProperty object)
      {
        return createValuesPropertyAdapter();
      }
      @Override
      public Adapter caseTypeProperty(TypeProperty object)
      {
        return createTypePropertyAdapter();
      }
      @Override
      public Adapter caseValues(Values object)
      {
        return createValuesAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.Source <em>Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.Source
   * @generated
   */
  public Adapter createSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.SourceElement <em>Source Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.SourceElement
   * @generated
   */
  public Adapter createSourceElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.AnyField <em>Any Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.AnyField
   * @generated
   */
  public Adapter createAnyFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.Body <em>Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.Body
   * @generated
   */
  public Adapter createBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.BodyElement <em>Body Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.BodyElement
   * @generated
   */
  public Adapter createBodyElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.Extend <em>Extend</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.Extend
   * @generated
   */
  public Adapter createExtendAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.AnyNestedField <em>Any Nested Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.AnyNestedField
   * @generated
   */
  public Adapter createAnyNestedFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.NestedField <em>Nested Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.NestedField
   * @generated
   */
  public Adapter createNestedFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.NestedFields <em>Nested Fields</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.NestedFields
   * @generated
   */
  public Adapter createNestedFieldsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.StringProperty <em>String Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.StringProperty
   * @generated
   */
  public Adapter createStringPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.ValuesProperty <em>Values Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.ValuesProperty
   * @generated
   */
  public Adapter createValuesPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.TypeProperty <em>Type Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.TypeProperty
   * @generated
   */
  public Adapter createTypePropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link yaml.helper.dsl.yamlGenDsl.Values <em>Values</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see yaml.helper.dsl.yamlGenDsl.Values
   * @generated
   */
  public Adapter createValuesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //YamlGenDslAdapterFactory
